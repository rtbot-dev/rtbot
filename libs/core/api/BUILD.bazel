load("@rules_cc//cc:defs.bzl", "cc_library")
load("@emsdk//emscripten_toolchain:wasm_rules.bzl", "wasm_cc_binary")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "rtbot-api",
    srcs = glob([
        "src/**/*.cpp",
    ]),
    hdrs = glob(["include/**/*.h"]),
    copts = [
        "-Ilibs/core/lib/include/rtbot",
        # this is needed when building from another workspace
        "-Iexternal/rtbot/libs/core/lib/include/rtbot",
        # this is only needed for wasm compilation, we may want to create
        # a different rule later
        "-fexceptions",
    ],
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
        "//libs/core/finance:rtbot-finance",
        "//libs/core/lib:rtbot",
        "//libs/core/std:rtbot-std",
        "@json-cpp//:lib",
        "@yaml-cpp//:lib",
    ],
)

BASE_LINKOPTS = [
    "--bind",  # Enable embind
    "-s MODULARIZE",
    "-s NO_DISABLE_EXCEPTION_CATCHING",
    #"-s EXPORT_ES6=1",
]

cc_binary(
    name = "bindings-cpp-wasm",
    srcs = ["wasm/emscripten-bindings.cpp"],
    linkopts = BASE_LINKOPTS,
    deps = [":rtbot-api"],
)

wasm_cc_binary(
    name = "rtbot-wasm",
    cc_target = ":bindings-cpp-wasm",
)

genrule(
    name = "declarations",
    outs = ["index.d.ts"],
    cmd = """
    echo "export interface RtBotEmbindModule {" >> $@
    echo "  createPipeline(pipelineId: string, programStr: string): string;" >> $@
    echo "  deletePipeline(pipelineId: string): string;" >> $@
    echo "  receiveMessageInPipelineDebug(pipelineId: string, time: number, value: number): string;" >> $@
    echo "}" >> $@
    echo "declare function factory(): Promise<RtBotEmbindModule>;" >> $@
    echo "export default factory;" >> $@
    """,
)

genrule(
    name = "package_json",
    outs = ["package.json"],
    cmd = """
            echo "{
    \\"name\\": \\"@rtbot/wasm\\",
    \\"version\\": \\"0.1.0\\",
    \\"main\\": \\"./rtbot-wasm/bindings-cpp-wasm\\",
    \\"typings\\": \\"index.d.ts\\"
}" > $@
    """,
)

# npm package for wasm code
npm_package(
    name = "js",
    srcs = [
        ":declarations",
        ":package_json",
        ":rtbot-wasm",
    ],
    package = "@rtbot/wasm",
)
