import { z } from "zod"
import { Operator } from "./program"

type PortType = "number" | "boolean" | "vector_number" | "vector_boolean";

const prototypeSchema = z.object({
  type: z.string(),
  prototype: z.string()
});

export const programSchema = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  date: z.any().optional(),
  apiVersion: z.enum(["v1"]),
  author: z.string().optional(),
  license: z.string().optional(),
  operators: z.array(
    z.union([
      prototypeSchema,
      z.discriminatedUnion("type", [{{{ schemas }}}])
    ])
  ),
  connections: z.array(
    z.object({
      from: z.string(),
      to: z.string(),
      fromPort: z.string().optional(),
      toPort: z.string().optional(),
    }).strict()
  ),
});

{{#each operators}}
{{#each extraTypes}}

export type {{ name }} = {
{{#each entries}}
  {{ name }}: {{ type }},
{{/each}}
}
{{/each}}

export class {{ type }} extends Operator {
  readonly type = "{{ type }}";
  constructor(
{{ parametersBlock }}
  ) {
    super(id);
    const schema = {{{ schema }}}
    schema.parse(JSON.parse(JSON.stringify(this)));
  }
}
{{/each}}